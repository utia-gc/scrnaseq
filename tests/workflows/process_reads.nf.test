nextflow_workflow {

    name "Test Workflow PROCESS_READS"
    script "workflows/process_reads.nf"
    workflow "PROCESS_READS"

    test("PROCESS_READS concatenates reads -- PE reads.") {

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            workflow {
                // instantiate instances of helper classes
                def readsPE1 = new ReadsPE1()
                def readsPE2 = new ReadsPE2()

                """
                input[0] = Channel.of(
                    [
                        [
                            sampleName:   "${readsPE1.metadata.sampleName}",
                            sampleNumber: "${readsPE1.metadata.sampleNumber}",
                            lane:         "${readsPE1.metadata.lane}",
                            readType:     "${readsPE1.metadata.readType}"
                        ],
                        [
                            file("${readsPE1.reads[0]}"),
                            file("${readsPE1.reads[1]}")
                        ]
                    ],
                    [
                        [
                            sampleName:   "${readsPE2.metadata.sampleName}",
                            sampleNumber: "${readsPE2.metadata.sampleNumber}",
                            lane:         "${readsPE2.metadata.lane}",
                            readType:     "${readsPE2.metadata.readType}"
                        ],
                        [
                            file("${readsPE2.reads[0]}"),
                            file("${readsPE2.reads[1]}")
                        ]
                    ]
                )
                """
            }
        }

        then {
            // instantiate instances of helper classes
            def readsPE1 = new ReadsPE1()
            def readsPE2 = new ReadsPE2()

            // test workflow status
            assert workflow.success
            assert workflow.trace.succeeded().size() == 1

            // test read trimming and concatenation
            with(workflow.out.reads_pre_align) {
                assert size() == 1
                with(get(0)) {
                    assert size() == 2
                    assert get(1).get(0) ==~ /^.*\/${readsPE1.metadata.sampleName}_R1.fastq.gz/
                    assert get(1).get(1) ==~ /^.*\/${readsPE1.metadata.sampleName}_R2.fastq.gz/
                }
            }
            assert snapshot(workflow.out.reads_pre_align).match()
        }

    }

}
