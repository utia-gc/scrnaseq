nextflow_workflow {

    name "Test Workflow PROCESS_READS"
    script "workflows/process_reads.nf"
    workflow "PROCESS_READS"

    test("PROCESS_READS concatenates reads -- PE reads.") {

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [
                            sampleName:   "SRR6924569",
                            sampleNumber: "1",
                            lane:         "001",
                            readType:     "paired"
                        ],
                        [
                            file("https://github.com/utia-gc/ngs-test/raw/ngs/data/reads/raw/SRR6924569_S1_L001_R1_001.fastq.gz"),
                            file("https://github.com/utia-gc/ngs-test/raw/ngs/data/reads/raw/SRR6924569_S1_L001_R2_001.fastq.gz")
                        ]
                    ],
                    [
                        [
                            sampleName:   "SRR6924569",
                            sampleNumber: "1",
                            lane:         "002",
                            readType:     "paired"
                        ],
                        [
                            file("https://github.com/utia-gc/ngs-test/raw/ngs/data/reads/raw/SRR6924569_S1_L002_R1_001.fastq.gz"),
                            file("https://github.com/utia-gc/ngs-test/raw/ngs/data/reads/raw/SRR6924569_S1_L002_R2_001.fastq.gz")
                        ]
                    ]
                )
                """
            }
        }

        then {
            // test workflow status
            assert workflow.success
            assert workflow.trace.succeeded().size() == 1

            // test read trimming and concatenation
            with(workflow.out.reads_pre_align) {
                assert size() == 1
                with(get(0)) {
                    assert size() == 2
                    assert get(1).get(0) ==~ /^.*\/SRR6924569_R1.fastq.gz/
                    assert get(1).get(1) ==~ /^.*\/SRR6924569_R2.fastq.gz/
                }
            }
            assert snapshot(workflow.out.reads_pre_align).match()
        }

    }

}
