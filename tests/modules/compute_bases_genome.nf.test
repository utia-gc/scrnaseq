nextflow_process {

    name "Test Process compute_bases_genome"
    script "modules/compute_bases_genome.nf"
    process "compute_bases_genome"

    test("compute_bases_genome computes the number of bases in a reference genome") {
        // instantiate helper objects
        def refs = new RefsEnsembl()

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            process {
                """
                input[0] = file("${projectDir}/${refs.getGenomeIndex()}")
                """
            }
        }

        then {
            // test process success
            assert process.success

            // test expected number bases
            with(process.out.bases) {
                assert Long.valueOf(get(0)) == 230218L
            }

            // test reproducibility
            assert snapshot(process.out).match()
        }

    }

    test("compute_bases_genome computes the number of bases in a large reference genome and outputs a number") {
        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            process {
                """
                input[0] = file("${projectDir}/tests/data/references/GCF_002263795.3_ARS-UCD2.0_genomic.fna.fai")
                """
            }
        }

        then {
            // test process success
            assert process.success

            // test expected number bases
            with(process.out.bases) {
                assert Long.valueOf(get(0)) > 2_000_000_000L
            }

            // test reproducibility
            assert snapshot(process.out).match()
        }

    }

}
