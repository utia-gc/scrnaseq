nextflow_process {

    name "Test Process multiqc"
    script "modules/multiqc.nf"
    process "multiqc"

    test("multiqc should run on MultiQC test data.") {
        // instantiate helper objects
        def readsLane1 = new ReadsSELane1()

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            process {
                """
                input[0] = [
                    file("${projectDir}/${readsLane1.getTrimLogCutadapt()}"),
                    file("${projectDir}/${readsLane1.getTrimLogFastp()}")
                ]
                input[1] = file("${projectDir}/tests/data/conf/multiqc_config.yaml")
                input[2] = "multiqc"
                """
            }
        }

        then {
            assert process.success

            // test html output
            with(process.out.report) {
                assert size() == 1
                assert get(0) ==~ /^.*\/multiqc\.html/
            }
            // test multiqc data output
            with(process.out.data.get(0)) {
                assert size() == 8
                assert get(0) ==~ /^.*\/multiqc_data\/multiqc\.log/
                assert get(1) ==~ /^.*\/multiqc_data\/multiqc_citations\.txt/
                assert get(2) ==~ /^.*\/multiqc_data\/multiqc_cutadapt\.txt/
                assert get(3) ==~ /^.*\/multiqc_data\/multiqc_data\.json/
                assert get(4) ==~ /^.*\/multiqc_data\/multiqc_fastp\.txt/
                assert get(5) ==~ /^.*\/multiqc_data\/multiqc_general_stats\.txt/
                assert get(6) ==~ /^.*\/multiqc_data\/multiqc_software_versions\.txt/
                assert get(7) ==~ /^.*\/multiqc_data\/multiqc_sources\.txt/
            }
        }

    }

}
