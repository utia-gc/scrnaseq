nextflow_workflow {

    name "Test Workflow Cat_Reads"
    script "subworkflows/cat_reads.nf"
    workflow "Cat_Reads"

    test("Cat_Reads concatenates reads -- PE reads") {

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [
                            sampleName:   "Chromium_3p_GEX_Human_PBMC_chr21_100000",
                            sampleNumber: "1",
                            lane:         "001",
                            readType:     "paired"
                        ],
                        [
                            file("https://github.com/utia-gc/ngs-test/raw/scrnaseq/data/reads/raw/Chromium_3p_GEX_Human_PBMC_chr21_100000_S1_L001_R1_001.fastq.gz"),
                            file("https://github.com/utia-gc/ngs-test/raw/scrnaseq/data/reads/raw/Chromium_3p_GEX_Human_PBMC_chr21_100000_S1_L001_R2_001.fastq.gz")
                        ]
                    ],
                    [
                        [
                            sampleName:   "Chromium_3p_GEX_Human_PBMC_chr21_100000",
                            sampleNumber: "1",
                            lane:         "002",
                            readType:     "paired"
                        ],
                        [
                            file("https://github.com/utia-gc/ngs-test/raw/scrnaseq/data/reads/raw/Chromium_3p_GEX_Human_PBMC_chr21_100000_S1_L002_R1_001.fastq.gz"),
                            file("https://github.com/utia-gc/ngs-test/raw/scrnaseq/data/reads/raw/Chromium_3p_GEX_Human_PBMC_chr21_100000_S1_L002_R2_001.fastq.gz")
                        ]
                    ]
                )
                """
            }
        }

        then {
            assert workflow.success

            with(workflow.out.reads_catted.get(0)) {
                String sampleName = 'Chromium_3p_GEX_Human_PBMC_chr21_100000'
                assert size() == 2
                assert get(1).get(0) ==~ /^.*\/${sampleName}_R1.fastq.gz/
                assert path(get(1).get(0)).linesGzip.size() == 800000
                assert get(1).get(1) ==~ /^.*\/${sampleName}_R2.fastq.gz/
                assert path(get(1).get(1)).linesGzip.size() == 800000
            }

            assert snapshot(workflow.out).match()
        }

    }

    test("Cat_Reads concatenates reads in lexicographic order -- PE reads.") {

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [
                            sampleName:   "Chromium_3p_GEX_Human_PBMC_chr21_100000",
                            sampleNumber: "1",
                            lane:         "002",
                            readType:     "paired"
                        ],
                        [
                            file("https://github.com/utia-gc/ngs-test/raw/scrnaseq/data/reads/raw/Chromium_3p_GEX_Human_PBMC_chr21_100000_S1_L002_R1_001.fastq.gz"),
                            file("https://github.com/utia-gc/ngs-test/raw/scrnaseq/data/reads/raw/Chromium_3p_GEX_Human_PBMC_chr21_100000_S1_L002_R2_001.fastq.gz")
                        ]
                    ],
                    [
                        [
                            sampleName:   "Chromium_3p_GEX_Human_PBMC_chr21_100000",
                            sampleNumber: "1",
                            lane:         "001",
                            readType:     "paired"
                        ],
                        [
                            file("https://github.com/utia-gc/ngs-test/raw/scrnaseq/data/reads/raw/Chromium_3p_GEX_Human_PBMC_chr21_100000_S1_L001_R1_001.fastq.gz"),
                            file("https://github.com/utia-gc/ngs-test/raw/scrnaseq/data/reads/raw/Chromium_3p_GEX_Human_PBMC_chr21_100000_S1_L001_R2_001.fastq.gz")
                        ]
                    ]
                )
                """
            }
        }

        then {
            assert workflow.success

            with(workflow.out.reads_catted.get(0)) {
                String sampleName = 'Chromium_3p_GEX_Human_PBMC_chr21_100000'
                assert size() == 2
                assert get(1).get(0) ==~ /^.*\/${sampleName}_R1.fastq.gz/
                assert path(get(1).get(0)).linesGzip.size() == 800000
                assert get(1).get(1) ==~ /^.*\/${sampleName}_R2.fastq.gz/
                assert path(get(1).get(1)).linesGzip.size() == 800000
            }

            assert snapshot(workflow.out).match()
        }

    }

}
