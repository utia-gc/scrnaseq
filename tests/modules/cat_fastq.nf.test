nextflow_process {

    name "Test Process cat_fastq"
    script "modules/cat_fastq.nf"
    process "cat_fastq"

    test("cat_fastq concatenates fastq files for single end reads") {

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            process {
                """
                input[0] = [
                    [
                        sampleName:   "SRR1066657",
                        sampleNumber: "3",
                        readType:     "single"
                    ],
                    [
                        file("https://github.com/utia-gc/ngs-test/raw/ngs/data/reads/raw/SRR1066657_S3_L001_R1_001.fastq.gz"),
                        file("https://github.com/utia-gc/ngs-test/raw/ngs/data/reads/raw/SRR1066657_S3_L002_R1_001.fastq.gz")
                    ],
                    []
                ]
                """
            }
        }

        then {
            assert process.success

            with(process.out.reads.get(0)) {
                assert size() == 2
                assert get(1) ==~ /^.*\/SRR1066657_R1.fastq.gz/
                assert path(get(1)).linesGzip.size() == 400000
            }

            assert snapshot(process.out).match()
        }

    }

    test("cat_fastq concatenates fastq files for paired end reads") {

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            process {
                """
                input[0] = [
                    [
                        sampleName:   "SRR6924569",
                        sampleNumber: "1",
                        readType:     "paired"
                    ],
                    [
                        file("https://github.com/utia-gc/ngs-test/raw/ngs/data/reads/raw/SRR6924569_S1_L001_R1_001.fastq.gz"),
                        file("https://github.com/utia-gc/ngs-test/raw/ngs/data/reads/raw/SRR6924569_S1_L002_R1_001.fastq.gz")
                    ],
                    [
                        file("https://github.com/utia-gc/ngs-test/raw/ngs/data/reads/raw/SRR6924569_S1_L001_R2_001.fastq.gz"),
                        file("https://github.com/utia-gc/ngs-test/raw/ngs/data/reads/raw/SRR6924569_S1_L002_R2_001.fastq.gz")
                    ]
                ]
                """
            }
        }

        then {
            assert process.success

            with(process.out.reads.get(0)) {
                assert size() == 2
                assert get(1).get(0) ==~ /^.*\/SRR6924569_R1.fastq.gz/
                assert path(get(1).get(0)).linesGzip.size() == 400000
                assert get(1).get(1) ==~ /^.*\/SRR6924569_R2.fastq.gz/
                assert path(get(1).get(1)).linesGzip.size() == 400000
            }

            assert snapshot(process.out).match()
        }

    }

}
