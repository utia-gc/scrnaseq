nextflow_workflow {

    name "Test Workflow CHECK_QUALITY"
    script "workflows/check_quality.nf"
    workflow "CHECK_QUALITY"

    test("CHECK_QUALITY succeeds with default params -- PE reads.") {

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            workflow {
                // instantiate instances of helper classes
                def reads_raw      = new ReadsPE1()
                def reads_prealign = new ReadsPE2()

                """
                input[0] = [
                    [
                        sampleName: "${reads_raw.metadata.sampleName}",
                        readType:   "${reads_raw.metadata.readType}"
                    ],
                    [
                        file("${reads_raw.reads[0]}"),
                        file("${reads_raw.reads[1]}")
                    ]
                ]
                input[1] = [
                    [
                        sampleName: "${reads_prealign.metadata.sampleName}",
                        readType:   "${reads_prealign.metadata.readType}"
                    ],
                    [
                        file("${reads_prealign.reads[0]}"),
                        file("${reads_prealign.reads[1]}")
                    ]
                ]
                input[2] = Channel.of(file("https://github.com/ewels/MultiQC_TestData/raw/master/data/modules/cellranger/cellranger-7.1.0/web_summary.html"))
                """
            }
        }

        then {
            // instantiate instances of helper classes
            def reads_raw      = new ReadsPE1()
            def reads_prealign = new ReadsPE2()

            // test workflow status
            assert workflow.success
            assert workflow.trace.succeeded().size() == 6

            // test FastQC html files get published to reports directory
            def htmlR1Raw      = path("${params.publishDirReports}/fastqc/${reads_raw.metadata.sampleName}_S1_L001_R1_001_fastqc.html")
            def htmlR2Raw      = path("${params.publishDirReports}/fastqc/${reads_raw.metadata.sampleName}_S1_L001_R2_001_fastqc.html")
            assert htmlR1Raw.exists()
            assert htmlR2Raw.exists()
            def htmlR1Prealign = path("${params.publishDirReports}/fastqc/${reads_prealign.metadata.sampleName}_S1_L002_R1_001_fastqc.html")
            def htmlR2Prealign = path("${params.publishDirReports}/fastqc/${reads_prealign.metadata.sampleName}_S1_L002_R2_001_fastqc.html")
            assert htmlR1Prealign.exists()
            assert htmlR2Prealign.exists()
            // test FastQC zip files get published to reports directory
            def zipR1Raw       = path("${params.publishDirReports}/fastqc/${reads_raw.metadata.sampleName}_S1_L001_R1_001_fastqc.zip")
            def zipR2Raw       = path("${params.publishDirReports}/fastqc/${reads_raw.metadata.sampleName}_S1_L001_R2_001_fastqc.zip")
            assert zipR1Raw.exists()
            assert zipR2Raw.exists()
            def zipR1Prealign  = path("${params.publishDirReports}/fastqc/${reads_prealign.metadata.sampleName}_S1_L002_R1_001_fastqc.zip")
            def zipR2Prealign  = path("${params.publishDirReports}/fastqc/${reads_prealign.metadata.sampleName}_S1_L002_R2_001_fastqc.zip")
            assert zipR1Prealign.exists()
            assert zipR2Prealign.exists()
            // test MultiQC html reports get published to reports directory
            def htmlMQCRaw         = path("${params.publishDirReports}/multiqc/reads_raw/reads_raw.html")
            def htmlMQCPrealign    = path("${params.publishDirReports}/multiqc/reads_prealign/reads_prealign.html")
            def htmlMQCMapQuant    = path("${params.publishDirReports}/multiqc/map_quant/map_quant.html")
            def htmlMQCFull        = path("${params.publishDirReports}/multiqc/scrnaseq/scrnaseq.html")
            assert htmlMQCRaw.exists()
            assert htmlMQCPrealign.exists()
            assert htmlMQCMapQuant.exists()
            assert htmlMQCFull.exists()
            // test MultiQC data files get published to reports directory
            def dataDirMQCRaw      = path("${params.publishDirReports}/multiqc/reads_raw/reads_raw_data")
            def dataDirMQCPrealign = path("${params.publishDirReports}/multiqc/reads_prealign/reads_prealign_data")
            def dataDirMQCMapQuant = path("${params.publishDirReports}/multiqc/map_quant/map_quant_data")
            def dataDirMQCFull     = path("${params.publishDirReports}/multiqc/scrnaseq/scrnaseq_data")
            assert dataDirMQCRaw.exists()
            assert dataDirMQCPrealign.exists()
            assert dataDirMQCMapQuant.exists()
            assert dataDirMQCFull.exists()
        }

    }

    test("CHECK_QUALITY succeeds and skips raw reads QC with `params.skipRawReadsQC = true` -- PE reads.") {

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
                skipRawReadsQC    = true
            }
            workflow {
                // instantiate instances of helper classes
                def reads_raw      = new ReadsPE1()
                def reads_prealign = new ReadsPE2()

                """
                input[0] = [
                    [
                        sampleName: "${reads_raw.metadata.sampleName}",
                        readType:   "${reads_raw.metadata.readType}"
                    ],
                    [
                        file("${reads_raw.reads[0]}"),
                        file("${reads_raw.reads[1]}")
                    ]
                ]
                input[1] = [
                    [
                        sampleName: "${reads_prealign.metadata.sampleName}",
                        readType:   "${reads_prealign.metadata.readType}"
                    ],
                    [
                        file("${reads_prealign.reads[0]}"),
                        file("${reads_prealign.reads[1]}")
                    ]
                ]
                input[2] = Channel.of(file("https://github.com/ewels/MultiQC_TestData/raw/master/data/modules/cellranger/cellranger-7.1.0/web_summary.html"))
                """
            }
        }

        then {
            // instantiate instances of helper classes
            def reads_raw      = new ReadsPE1()
            def reads_prealign = new ReadsPE2()

            // test workflow status
            assert workflow.success
            assert workflow.trace.succeeded().size() == 4

            // test FastQC html files get published to reports directory
            def htmlR1Prealign = path("${params.publishDirReports}/fastqc/${reads_prealign.metadata.sampleName}_S1_L002_R1_001_fastqc.html")
            def htmlR2Prealign = path("${params.publishDirReports}/fastqc/${reads_prealign.metadata.sampleName}_S1_L002_R2_001_fastqc.html")
            assert htmlR1Prealign.exists()
            assert htmlR2Prealign.exists()
            // test FastQC zip files get published to reports directory
            def zipR1Prealign  = path("${params.publishDirReports}/fastqc/${reads_prealign.metadata.sampleName}_S1_L002_R1_001_fastqc.zip")
            def zipR2Prealign  = path("${params.publishDirReports}/fastqc/${reads_prealign.metadata.sampleName}_S1_L002_R2_001_fastqc.zip")
            assert zipR1Prealign.exists()
            assert zipR2Prealign.exists()
            // test MultiQC html reports get published to reports directory
            def htmlMQCPrealign    = path("${params.publishDirReports}/multiqc/reads_prealign/reads_prealign.html")
            def htmlMQCMapQuant    = path("${params.publishDirReports}/multiqc/map_quant/map_quant.html")
            def htmlMQCFull        = path("${params.publishDirReports}/multiqc/scrnaseq/scrnaseq.html")
            assert htmlMQCPrealign.exists()
            assert htmlMQCMapQuant.exists()
            assert htmlMQCFull.exists()
            // test MultiQC data files get published to reports directory
            def dataDirMQCPrealign = path("${params.publishDirReports}/multiqc/reads_prealign/reads_prealign_data")
            def dataDirMQCMapQuant = path("${params.publishDirReports}/multiqc/map_quant/map_quant_data")
            def dataDirMQCFull     = path("${params.publishDirReports}/multiqc/scrnaseq/scrnaseq_data")
            assert dataDirMQCPrealign.exists()
            assert dataDirMQCMapQuant.exists()
            assert dataDirMQCFull.exists()
        }

    }

    test("CHECK_QUALITY succeeds and skips raw reads QC with `params.skipPrealignReadsQC = true` -- PE reads.") {

        when {
            params {
                publishDirReports   = "${outputDir}/reports"
                publishDirData      = "${outputDir}/data"
                skipPrealignReadsQC = true
            }
            workflow {
                // instantiate instances of helper classes
                def reads_raw      = new ReadsPE1()
                def reads_prealign = new ReadsPE2()

                """
                input[0] = [
                    [
                        sampleName: "${reads_raw.metadata.sampleName}",
                        readType:   "${reads_raw.metadata.readType}"
                    ],
                    [
                        file("${reads_raw.reads[0]}"),
                        file("${reads_raw.reads[1]}")
                    ]
                ]
                input[1] = [
                    [
                        sampleName: "${reads_prealign.metadata.sampleName}",
                        readType:   "${reads_prealign.metadata.readType}"
                    ],
                    [
                        file("${reads_prealign.reads[0]}"),
                        file("${reads_prealign.reads[1]}")
                    ]
                ]
                input[2] = Channel.of(file("https://github.com/ewels/MultiQC_TestData/raw/master/data/modules/cellranger/cellranger-7.1.0/web_summary.html"))
                """
            }
        }

        then {
            // instantiate instances of helper classes
            def reads_raw      = new ReadsPE1()
            def reads_prealign = new ReadsPE2()

            // test workflow status
            assert workflow.success
            assert workflow.trace.succeeded().size() == 4

            // test FastQC html files get published to reports directory
            def htmlR1Raw      = path("${params.publishDirReports}/fastqc/${reads_raw.metadata.sampleName}_S1_L001_R1_001_fastqc.html")
            def htmlR2Raw      = path("${params.publishDirReports}/fastqc/${reads_raw.metadata.sampleName}_S1_L001_R2_001_fastqc.html")
            assert htmlR1Raw.exists()
            assert htmlR2Raw.exists()
            // test FastQC zip files get published to reports directory
            def zipR1Raw       = path("${params.publishDirReports}/fastqc/${reads_raw.metadata.sampleName}_S1_L001_R1_001_fastqc.zip")
            def zipR2Raw       = path("${params.publishDirReports}/fastqc/${reads_raw.metadata.sampleName}_S1_L001_R2_001_fastqc.zip")
            assert zipR1Raw.exists()
            assert zipR2Raw.exists()
            // test MultiQC html reports get published to reports directory
            def htmlMQCRaw         = path("${params.publishDirReports}/multiqc/reads_raw/reads_raw.html")
            def htmlMQCMapQuant    = path("${params.publishDirReports}/multiqc/map_quant/map_quant.html")
            def htmlMQCFull        = path("${params.publishDirReports}/multiqc/scrnaseq/scrnaseq.html")
            assert htmlMQCRaw.exists()
            assert htmlMQCMapQuant.exists()
            assert htmlMQCFull.exists()
            // test MultiQC data files get published to reports directory
            def dataDirMQCRaw      = path("${params.publishDirReports}/multiqc/reads_raw/reads_raw_data")
            def dataDirMQCMapQuant = path("${params.publishDirReports}/multiqc/map_quant/map_quant_data")
            def dataDirMQCFull     = path("${params.publishDirReports}/multiqc/scrnaseq/scrnaseq_data")
            assert dataDirMQCRaw.exists()
            assert dataDirMQCMapQuant.exists()
            assert dataDirMQCFull.exists()
        }

    }

    test("CHECK_QUALITY succeeds and skips all reads QC with `params.skipRawReadsQC = true` and `params.skipPrealignReadsQC = true` -- PE reads.") {

        when {
            params {
                publishDirReports   = "${outputDir}/reports"
                publishDirData      = "${outputDir}/data"
                skipRawReadsQC      = true
                skipPrealignReadsQC = true
            }
            workflow {
                """
                input[0] = [
                    [
                        sampleName: "SRR6924569_GSM3073206_Saccharomyces_cerevisiae-AR_Biological_Repeat-2",
                        readType:   "paired"
                    ],
                    [
                        file("https://github.com/trev-f/SRAlign-test/raw/rnaseq/data/reads/SRR6924569_GSM3073206_Saccharomyces_cerevisiae-AR_Biological_Repeat-2_Saccharomyces_cerevisiae_RNA-Seq_1_50000.fastq.gz"),
                        file("https://github.com/trev-f/SRAlign-test/raw/rnaseq/data/reads/SRR6924569_GSM3073206_Saccharomyces_cerevisiae-AR_Biological_Repeat-2_Saccharomyces_cerevisiae_RNA-Seq_2_50000.fastq.gz")
                    ]
                ]
                input[1] = [
                    [
                        sampleName: "SRR6924589_GSM3073211_Saccharomyces_cerevisiae-AN_Biological_Repeat-1",
                        readType:   "paired"
                    ],
                    [
                        file("https://github.com/utia-gc/ngs-test/raw/rnaseq/data/reads/SRR6924589_GSM3073211_Saccharomyces_cerevisiae-AN_Biological_Repeat-1_Saccharomyces_cerevisiae_RNA-Seq_1_50000.fastq.gz"),
                        file("https://github.com/utia-gc/ngs-test/raw/rnaseq/data/reads/SRR6924589_GSM3073211_Saccharomyces_cerevisiae-AN_Biological_Repeat-1_Saccharomyces_cerevisiae_RNA-Seq_2_50000.fastq.gz")
                    ]
                ]
                input[2] = Channel.of(file("https://github.com/ewels/MultiQC_TestData/raw/master/data/modules/cellranger/cellranger-7.1.0/web_summary.html"))
                """
            }
        }

        then {
            // test workflow status
            assert workflow.success
            assert workflow.trace.succeeded().size() == 2

            // test MultiQC html reports get published to reports directory
            def htmlMQCMapQuant    = path("${params.publishDirReports}/multiqc/map_quant/map_quant.html")
            def htmlMQCFull        = path("${params.publishDirReports}/multiqc/scrnaseq/scrnaseq.html")
            assert htmlMQCMapQuant.exists()
            assert htmlMQCFull.exists()
            // test MultiQC data files get published to reports directory
            def dataDirMQCMapQuant = path("${params.publishDirReports}/multiqc/map_quant/map_quant_data")
            def dataDirMQCFull     = path("${params.publishDirReports}/multiqc/scrnaseq/scrnaseq_data")
            assert dataDirMQCMapQuant.exists()
            assert dataDirMQCFull.exists()
        }

    }

}
