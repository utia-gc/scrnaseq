nextflow_workflow {

    name "Test Workflow Merge_Reads"
    script "subworkflows/merge_reads.nf"
    workflow "Merge_Reads"

    test("Merge_Reads merges read channels for single end reads when set to not cat reads") {

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [
                            sampleName:   "SRR1066657",
                            sampleNumber: "3",
                            lane:         "001",
                            readType:     "single"
                        ],
                        file("https://github.com/utia-gc/ngs-test/raw/ngs/data/reads/raw/SRR1066657_S3_L001_R1_001.fastq.gz")
                    ],
                    [
                        [
                            sampleName:   "SRR1066657",
                            sampleNumber: "3",
                            lane:         "002",
                            readType:     "single"
                        ],
                        file("https://github.com/utia-gc/ngs-test/raw/ngs/data/reads/raw/SRR1066657_S3_L002_R1_001.fastq.gz")
                    ]
                )
                input[1] = false
                """
            }
        }

        then {
            assert workflow.success

            with(workflow.out.reads_merged.get(0)) {
                assert size() == 2
                assert get(1).get(0) ==~ /^.*\/SRR1066657_S3_L001_R1_001.fastq.gz/
                assert get(1).get(1) ==~ /^.*\/SRR1066657_S3_L002_R1_001.fastq.gz/
            }

            assert snapshot(workflow.out).match()
        }

    }

    test("Merge_Reads merges and concatenates fastq files for single end reads when set to cat reads") {

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [
                            sampleName:   "SRR1066657",
                            sampleNumber: "3",
                            lane:         "001",
                            readType:     "single"
                        ],
                        file("https://github.com/utia-gc/ngs-test/raw/ngs/data/reads/raw/SRR1066657_S3_L001_R1_001.fastq.gz")
                    ],
                    [
                        [
                            sampleName:   "SRR1066657",
                            sampleNumber: "3",
                            lane:         "002",
                            readType:     "single"
                        ],
                        file("https://github.com/utia-gc/ngs-test/raw/ngs/data/reads/raw/SRR1066657_S3_L002_R1_001.fastq.gz")
                    ]
                )
                input[1] = true
                """
            }
        }

        then {
            assert workflow.success

            with(workflow.out.reads_merged.get(0)) {
                assert size() == 2
                assert get(1) ==~ /^.*\/SRR1066657_R1.fastq.gz/
                assert path(get(1)).linesGzip.size() == 400000
            }

            assert snapshot(workflow.out).match()
        }

    }

    test("Merge_Reads merges read channels for paired end reads when set to not cat reads") {

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [
                            sampleName:   "SRR6924569",
                            sampleNumber: "1",
                            lane:         "001",
                            readType:     "paired"
                        ],
                        [
                            file("https://github.com/utia-gc/ngs-test/raw/ngs/data/reads/raw/SRR6924569_S1_L001_R1_001.fastq.gz"),
                            file("https://github.com/utia-gc/ngs-test/raw/ngs/data/reads/raw/SRR6924569_S1_L001_R2_001.fastq.gz")
                        ]
                    ],
                    [
                        [
                            sampleName:   "SRR6924569",
                            sampleNumber: "1",
                            lane:         "002",
                            readType:     "paired"
                        ],
                        [
                            file("https://github.com/utia-gc/ngs-test/raw/ngs/data/reads/raw/SRR6924569_S1_L002_R1_001.fastq.gz"),
                            file("https://github.com/utia-gc/ngs-test/raw/ngs/data/reads/raw/SRR6924569_S1_L002_R2_001.fastq.gz")
                        ]
                    ]
                )
                input[1] = false
                """
            }
        }

        then {
            assert workflow.success

            with(workflow.out.reads_merged.get(0)) {
                assert size() == 3
                assert get(1).get(0) ==~ /^.*\/SRR6924569_S1_L001_R1_001.fastq.gz/
                assert get(1).get(1) ==~ /^.*\/SRR6924569_S1_L002_R1_001.fastq.gz/
                assert get(2).get(0) ==~ /^.*\/SRR6924569_S1_L001_R2_001.fastq.gz/
                assert get(2).get(1) ==~ /^.*\/SRR6924569_S1_L002_R2_001.fastq.gz/
            }

            assert snapshot(workflow.out).match()
        }

    }

    test("Merge_Reads merges read channels for paired end reads when set to cat reads") {

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [
                            sampleName:   "SRR6924569",
                            sampleNumber: "1",
                            lane:         "001",
                            readType:     "paired"
                        ],
                        [
                            file("https://github.com/utia-gc/ngs-test/raw/ngs/data/reads/raw/SRR6924569_S1_L001_R1_001.fastq.gz"),
                            file("https://github.com/utia-gc/ngs-test/raw/ngs/data/reads/raw/SRR6924569_S1_L001_R2_001.fastq.gz")
                        ]
                    ],
                    [
                        [
                            sampleName:   "SRR6924569",
                            sampleNumber: "1",
                            lane:         "002",
                            readType:     "paired"
                        ],
                        [
                            file("https://github.com/utia-gc/ngs-test/raw/ngs/data/reads/raw/SRR6924569_S1_L002_R1_001.fastq.gz"),
                            file("https://github.com/utia-gc/ngs-test/raw/ngs/data/reads/raw/SRR6924569_S1_L002_R2_001.fastq.gz")
                        ]
                    ]
                )
                input[1] = true
                """
            }
        }

        then {
            assert workflow.success

            with(workflow.out.reads_merged.get(0)) {
                assert size() == 2
                assert get(1).get(0) ==~ /^.*\/SRR6924569_R1.fastq.gz/
                assert path(get(1).get(0)).linesGzip.size() == 400000
                assert get(1).get(1) ==~ /^.*\/SRR6924569_R2.fastq.gz/
                assert path(get(1).get(1)).linesGzip.size() == 400000
            }

            assert snapshot(workflow.out).match()
        }

    }

}
